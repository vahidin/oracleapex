package oracle.summit.model.appmodule.service;

import java.security.Principal;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.util.Hashtable;
import java.util.Iterator;
import java.util.logging.Level;

import oracle.jbo.ApplicationModule;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.SessionData;
import oracle.jbo.ViewObject;
import oracle.jbo.client.Configuration;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.DBTransactionImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewLinkImpl;

import oracle.summit.base.SummitApplicationModuleImpl;
import oracle.summit.base.SummitViewObjectImpl;
import oracle.summit.model.appmodule.CustomerImpl;
import oracle.summit.model.appmodule.OrdersImpl;
import oracle.summit.model.appmodule.service.common.AppModule;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Jun 01 11:19:00 CDT 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppModuleImpl extends SummitApplicationModuleImpl implements AppModule {
    /**
     * This is the default constructor (do not remove).
     */
    public AppModuleImpl() {
    }
    
    private OrdersImpl retrieveOrderById(long orderId) {
      EntityDefImpl orderDef = OrdersImpl.getDefinitionObject();
      Key orderKey = OrdersImpl.createPrimaryKey(new DBSequence(orderId));
      return (OrdersImpl)orderDef.findByPrimaryKey(getDBTransaction(),orderKey);
    }
    
    
    public String findOrderAndCustomer(long orderId) {
        OrdersImpl order = retrieveOrderById(orderId);
      if (order != null) {
            CustomerImpl cust = order.getCustomer();
        if (cust != null) {
          return "Customer: " + cust.getName() + ", Location: " + cust.getCity();
        }
        else {
          return "Unassigned";
        }
      }
      else {
        return null;
      }
    }  
    
    
    /*
     * Find an Order by Id
     */
    public String findOrderTotal(long orderId) {
      OrdersImpl order = retrieveOrderById(orderId);
      if (order != null) {
        return order.getTotal().toString();
      }
      return null;
    }
    
         /*
          * Update the status of an existing order
          */  
         public void updateOrderStatus(long orderId, String newStatus) {
        OrdersImpl order = retrieveOrderById(orderId);
           if (order != null) {
               order.setOrderFilled(newStatus);
             try {
               getDBTransaction().commit();
             }
             catch (JboException ex) {
               getDBTransaction().rollback();
               throw ex;
             }
           }
         }    
         
    /*
     * Create a new Customer and Return the new id
     */
    public long createCustomer(String name, String city, Integer countryId) {
      EntityDefImpl customerDef = CustomerImpl.getDefinitionObject();
      CustomerImpl newCustomer = (CustomerImpl)customerDef.createInstance2(getDBTransaction(),null);
        newCustomer.setName(name);
        newCustomer.setCity(city);
        newCustomer.setCountryId(countryId);
      try {
        getDBTransaction().commit();
      }
      catch (JboException ex) {
        getDBTransaction().rollback();
        throw ex;
      }
      DBSequence newIdAssigned = newCustomer.getId();
      return newIdAssigned.getSequenceNumber().longValue();
    }
         
    // Custom method in an application module implementation class
    public void doSomeCustomProcessing() {
        ViewObject vo = getCustomerView1();
        // create secondary row set iterator with system-assigned name
        RowSetIterator iter = vo.createRowSetIterator(null);
        while (iter.hasNext()) {
            Row r = iter.next();
            // Do something with the current row.
            Integer custId = (Integer)r.getAttribute("Id");
            String name  = (String)r.getAttribute("Name");
            System.out.println(custId + " " + name);
        }
        // close secondary row set iterator
        iter.closeRowSetIterator();
    }
  
 
    /**
     * Container's getter for CustomerView1.
     * @return CustomerView1
     */
    public SummitViewObjectImpl getCustomerView1() {
        return (SummitViewObjectImpl) findViewObject("CustomerView1");
    }

    /**
     * Container's getter for ItemView1.
     * @return ItemView1
     */
    public SummitViewObjectImpl getItemView1() {
        return (SummitViewObjectImpl) findViewObject("ItemView1");
    }

    /**
     * Container's getter for OrderView1.
     * @return OrderView1
     */
    public SummitViewObjectImpl getOrderView1() {
        return (SummitViewObjectImpl) findViewObject("OrderView1");
    }

    /**
     * Container's getter for ItemView2.
     * @return ItemView2
     */
    public SummitViewObjectImpl getItemView2() {
        return (SummitViewObjectImpl) findViewObject("ItemView2");
    }

    /**
     * Container's getter for OrderView2.
     * @return OrderView2
     */
    public SummitViewObjectImpl getOrderView2() {
        return (SummitViewObjectImpl) findViewObject("OrderView2");
    }

    /**
     * Container's getter for SItemOrdIdFkLink1.
     * @return SItemOrdIdFkLink1
     */
    public ViewLinkImpl getSItemOrdIdFkLink1() {
        return (ViewLinkImpl) findViewLink("SItemOrdIdFkLink1");
    }

    /**
     * Container's getter for SOrdCustomerIdFkLink1.
     * @return SOrdCustomerIdFkLink1
     */
    public ViewLinkImpl getSOrdCustomerIdFkLink1() {
        return (ViewLinkImpl) findViewLink("SOrdCustomerIdFkLink1");
    }

    @Override
    public void prepareSession(SessionData sessionData) {
        super.prepareSession(sessionData);
        setApplicationInfo ("AppModuleImpl", "prepareSession");
        String username = this.getUserPrincipalName();
        System.out.println(username);
    }
    
    protected void setApplicationInfo(String clientInfo, String clientIdentifier){
        DBTransactionImpl dbti = (DBTransactionImpl)getDBTransaction();
        CallableStatement statement =
            dbti.createCallableStatement("BEGIN " 
                                          + "DBMS_APPLICATION_INFO.SET_CLIENT_INFO (client_info => :client_info);" 
                                          + "DBMS_SESSION.SET_IDENTIFIER (:client_identifier); "
                                          + "END;", 0);
        try {
            statement.setString("client_info", clientInfo);
            statement.setString("client_identifier", clientIdentifier);
            statement.execute();
        } catch (SQLException sqlerr) {
            throw new JboException(sqlerr);
        } finally {
            try {
                if (statement != null) {
                    statement.close();
                }
            } catch (SQLException closeerr) {
                throw new JboException(closeerr);
            }
        }
    }
}
